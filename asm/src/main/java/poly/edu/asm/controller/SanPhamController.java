package poly.edu.asm.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;
import poly.edu.asm.dao.SanPhamDAO;
import poly.edu.asm.dao.LoaiDAO;
import poly.edu.asm.dao.NhaCungCapDAO;
import poly.edu.asm.entity.SanPham;
import poly.edu.asm.entity.Users;

import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/sanpham")
public class SanPhamController {

    @Autowired
    private SanPhamDAO sanPhamDAO;

    @Autowired
    private LoaiDAO loaiDAO;

    @Autowired
    private NhaCungCapDAO nhaCungCapDAO;

    @Autowired
    private HttpSession session;

    // ðŸŸ¢ Láº¥y danh sÃ¡ch áº£nh trong static/img
    private List<String> getImageList() {
        try {
            File folder = new ClassPathResource("static/img").getFile();
            if (folder.exists() && folder.isDirectory()) {
                return Arrays.stream(folder.listFiles())
                        .filter(File::isFile)
                        .map(File::getName)
                        .collect(Collectors.toList());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return List.of();
    }

    // ======== HIá»‚N THá»Š Táº¤T Cáº¢ Sáº¢N PHáº¨M ========
    @GetMapping
    public String tatCaSanPham(Model model) {
        List<SanPham> sanPhamList = sanPhamDAO.findAll();
        model.addAttribute("products", sanPhamList);
        return "SanPham";
    }

    // ======== CHI TIáº¾T Sáº¢N PHáº¨M ========
    @GetMapping("/detail/{id}")
    public String viewDetail(@PathVariable("id") Integer id, Model model) {
        SanPham sp = sanPhamDAO.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m cÃ³ ID: " + id));
        model.addAttribute("sp", sp);
        return "ctsp";
    }

    // ðŸŸ¡ Hiá»ƒn thá»‹ form thÃªm sáº£n pháº©m (pháº£i Ä‘Äƒng nháº­p)
    @GetMapping("/add")
    public String showAddForm(Model model) {
        Users user = (Users) session.getAttribute("loggedInUser");
        if (user == null) return "redirect:/login"; // ðŸ”’ chÆ°a Ä‘Äƒng nháº­p thÃ¬ cháº·n

        model.addAttribute("sanPham", new SanPham());
        model.addAttribute("dsLoai", loaiDAO.findAll());
        model.addAttribute("dsNCC", nhaCungCapDAO.findAll());
        model.addAttribute("dsHinh", getImageList());
        return "sanpham_form";
    }

    // ðŸŸ£ Hiá»ƒn thá»‹ form sá»­a sáº£n pháº©m (pháº£i Ä‘Äƒng nháº­p)
    @GetMapping("/edit/{id}")
    public String editForm(@PathVariable("id") Integer id, Model model) {
        Users user = (Users) session.getAttribute("loggedInUser");
        if (user == null) return "redirect:/login";

        SanPham sanPham = sanPhamDAO.findById(id).orElse(null);
        model.addAttribute("sanPham", sanPham);
        model.addAttribute("dsLoai", loaiDAO.findAll());
        model.addAttribute("dsNCC", nhaCungCapDAO.findAll());
        model.addAttribute("dsHinh", getImageList());
        return "sanpham_form";
    }

    // ðŸ”µ XÃ³a sáº£n pháº©m (pháº£i Ä‘Äƒng nháº­p)
    @GetMapping("/delete/{id}")
    public String deleteSanPham(@PathVariable("id") Integer id, Model model) {
        Users user = (Users) session.getAttribute("loggedInUser");
        if (user == null) return "redirect:/login";

        try {
            sanPhamDAO.deleteById(id);
        } catch (Exception e) {
            model.addAttribute("errorMessage", "KhÃ´ng thá»ƒ xÃ³a sáº£n pháº©m vÃ¬ Ä‘ang Ä‘Æ°á»£c tham chiáº¿u trong báº£ng tá»“n kho!");
            List<SanPham> sanPhamList = sanPhamDAO.findAll();
            model.addAttribute("products", sanPhamList);
            return "sanpham";
        }
        return "redirect:/sanpham";
    }

    // ðŸŸ¢ LÆ°u hoáº·c cáº­p nháº­t sáº£n pháº©m (pháº£i Ä‘Äƒng nháº­p)
    @PostMapping("/save")
    public String addOrUpdateSanPham(@ModelAttribute SanPham sanPham) {
        Users user = (Users) session.getAttribute("loggedInUser");
        if (user == null) return "redirect:/login";

        try {
            if (sanPham.getMaSanPham() != null) {
                SanPham existing = sanPhamDAO.findById(sanPham.getMaSanPham()).orElse(null);
                if (existing != null && (sanPham.getHinhAnh() == null || sanPham.getHinhAnh().isEmpty())) {
                    sanPham.setHinhAnh(existing.getHinhAnh());
                }
            }

            sanPhamDAO.save(sanPham);
            return "redirect:/sanpham";
        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }
    }
}
